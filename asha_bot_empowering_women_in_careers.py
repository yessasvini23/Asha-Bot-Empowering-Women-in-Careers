# -*- coding: utf-8 -*-
"""Asha Bot: Empowering Women in Careers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xqpYr4g4Cu3xPKLZ0uYb37BgCdS4KIBy
"""

# Asha Bot: Empowering Women in Careers
# Complete Google Colab Implementation with Gradio Interface

# Install required packages
!pip install gradio transformers torch sentence-transformers pandas nltk scikit-learn plotly pycountry geopandas matplotlib requests beautifulsoup4 -q

import os
import re
import json
import random
import time
import numpy as np
import pandas as pd
import torch
import nltk
import plotly.express as px
import plotly.graph_objects as go
import gradio as gr
from datetime import datetime
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
from transformers import pipeline
from nltk.sentiment import SentimentIntensityAnalyzer
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

# Download necessary NLTK resources
nltk.download('punkt', quiet=True)
nltk.download('stopwords', quiet=True)
nltk.download('vader_lexicon', quiet=True)

print("Setting up Asha Bot...")

# Initialize sentiment analyzer
sia = SentimentIntensityAnalyzer()

# Load sentence transformer model for semantic search
encoder_model = SentenceTransformer('paraphrase-MiniLM-L6-v2')

# Initialize text classification pipeline for bias detection
bias_classifier = pipeline("text-classification", model="distilbert-base-uncased", return_all_scores=True)

# Create sample data for the chatbot
# In a real implementation, these would be loaded from a database or API

# Sample job listings
job_data = pd.DataFrame({
    'job_id': range(1, 11),
    'title': [
        'Senior Software Engineer', 'Data Scientist', 'UX Designer',
        'Product Manager', 'Cybersecurity Analyst', 'AI Researcher',
        'Marketing Director', 'HR Manager', 'Financial Analyst', 'Project Manager'
    ],
    'company': [
        'TechGrowth Inc', 'DataMind Analytics', 'CreativeUX',
        'ProductSphere', 'SecureNet', 'AI Innovations',
        'MarketEdge', 'PeopleFirst', 'FinVision', 'ProjectPro'
    ],
    'location': [
        'Bangalore', 'Mumbai', 'Delhi',
        'Hyderabad', 'Chennai', 'Pune',
        'Kolkata', 'Bangalore', 'Mumbai', 'Delhi'
    ],
    'remote': [
        True, False, True,
        True, False, True,
        False, True, False, True
    ],
    'experience_required': [
        '5+ years', '3-5 years', '2-4 years',
        '4-6 years', '3-5 years', '4+ years',
        '7+ years', '5+ years', '2-4 years', '4-6 years'
    ],
    'description': [
        'Leading the development of enterprise software solutions.',
        'Analyzing complex datasets to drive business decisions.',
        'Creating intuitive user experiences for mobile applications.',
        'Managing product lifecycle from conception to launch.',
        'Protecting systems from cyber threats and vulnerabilities.',
        'Developing cutting-edge AI solutions for healthcare.',
        'Leading marketing strategy for a global brand.',
        'Managing HR operations and employee development programs.',
        'Conducting financial analysis and reporting.',
        'Managing cross-functional projects and teams.'
    ],
    'keywords': [
        'java, cloud, leadership', 'python, machine learning, statistics',
        'figma, user research, wireframing', 'agile, roadmap, stakeholder',
        'network security, incident response, CISSP', 'machine learning, neural networks, python',
        'brand strategy, digital marketing, leadership', 'talent acquisition, employee relations, HR policies',
        'financial modeling, data analysis, reporting', 'agile, scrum, team management'
    ],
    'flexibility': [
        'Flexible hours', 'Regular 9-5', 'Flexible hours',
        'Flexible hours', 'Regular 9-5', 'Flexible hours',
        'Regular 9-5', 'Flexible hours', 'Regular 9-5', 'Flexible hours'
    ],
    'women_friendly_benefits': [
        'Maternity leave, childcare support', 'Women leadership program', 'Extended parental leave',
        'Returnship program', 'Women in tech mentorship', 'Flexible work arrangements',
        'Leadership development for women', 'Childcare assistance', 'Women employee network', 'Parental support'
    ]
})

# Sample mentors data
mentors_data = pd.DataFrame({
    'mentor_id': range(1, 11),
    'name': [
        'Priya Sharma', 'Anjali Mehta', 'Deepa Patel',
        'Sunita Verma', 'Kavita Reddy', 'Nandini Krishnan',
        'Meera Singh', 'Lakshmi Iyer', 'Jyoti Agarwal', 'Ritu Kapoor'
    ],
    'position': [
        'CTO', 'Data Science Lead', 'UX Director',
        'VP Product', 'Cybersecurity Head', 'AI Research Lead',
        'CMO', 'HR Director', 'Finance Director', 'Senior PM'
    ],
    'company': [
        'TechSolutions', 'DataInsights', 'DesignHub',
        'ProductInnovate', 'SecureTech', 'AI Future',
        'BrandBuilders', 'TalentForce', 'FinanceGrowth', 'ProjectSuccess'
    ],
    'expertise': [
        'Software Architecture, Leadership', 'Machine Learning, Analytics',
        'Design Thinking, User Research', 'Product Strategy, Growth',
        'Cybersecurity, Network Protection', 'Artificial Intelligence, NLP',
        'Brand Strategy, Marketing', 'HR Policy, Culture Building',
        'Financial Planning, Analysis', 'Project Management, Agile'
    ],
    'experience_years': [15, 12, 10, 14, 11, 13, 16, 14, 12, 13],
    'bio': [
        'Priya transitioned from developer to CTO and has helped many women succeed in tech leadership.',
        'Anjali pioneered data-driven approaches at her company while mentoring junior data scientists.',
        'Deepa built UX teams from scratch at multiple startups with a focus on inclusive design.',
        'Sunita led product teams across 3 unicorn startups and advocates for women in product.',
        'Kavita broke barriers in cybersecurity and now actively promotes women in this field.',
        'Nandini published key research papers in AI while building diverse research teams.',
        'Meera transformed marketing strategies for global brands while championing women leaders.',
        'Lakshmi implemented progressive HR policies focused on gender equality and inclusion.',
        'Jyoti specializes in helping women understand financial independence and career growth.',
        'Ritu managed cross-border projects and specializes in helping women develop leadership skills.'
    ],
    'specializes_in': [
        'career transitions', 'technical upskilling', 'leadership development',
        'work-life balance', 'breaking barriers', 'research guidance',
        'personal branding', 'workplace policies', 'financial planning', 'managerial skills'
    ],
    'availability': [
        'Weekly', 'Bi-weekly', 'Monthly',
        'Weekly', 'Bi-weekly', 'On request',
        'Monthly', 'Weekly', 'Bi-weekly', 'Monthly'
    ]
})

# Sample events data
events_data = pd.DataFrame({
    'event_id': range(1, 11),
    'title': [
        'Women in Tech Summit', 'Data Science for All', 'UX Career Workshop',
        'Product Leadership Masterclass', 'Cybersecurity 101', 'AI Ethics Panel',
        'Marketing Careers Seminar', 'HR Networking Mixer', 'Financial Independence Workshop', 'Project Management Certification'
    ],
    'type': [
        'Conference', 'Workshop', 'Workshop',
        'Masterclass', 'Workshop', 'Panel Discussion',
        'Seminar', 'Networking', 'Workshop', 'Certification'
    ],
    'mode': [
        'Hybrid', 'Online', 'In-person',
        'Online', 'Online', 'In-person',
        'Hybrid', 'In-person', 'Online', 'Online'
    ],
    'date': [
        '2025-05-15', '2025-04-28', '2025-05-10',
        '2025-05-05', '2025-04-25', '2025-05-20',
        '2025-05-12', '2025-05-08', '2025-05-18', '2025-04-30'
    ],
    'location': [
        'Bangalore', 'Virtual', 'Mumbai',
        'Virtual', 'Virtual', 'Delhi',
        'Hybrid - Chennai', 'Hyderabad', 'Virtual', 'Virtual'
    ],
    'description': [
        'Annual summit bringing together women leaders in technology to share experiences and insights.',
        'Hands-on workshop teaching data science fundamentals with a focus on inclusivity.',
        'Career development workshop for women in UX design with portfolio reviews.',
        'Learn product leadership skills from successful women product leaders.',
        'Introduction to cybersecurity principles and career paths for women.',
        'Discussion on ethical considerations in AI development and implementation.',
        'Seminar on building successful marketing careers with networking opportunities.',
        'Networking event for HR professionals to share best practices for inclusive workplaces.',
        'Workshop on financial planning and building wealth as a professional woman.',
        'Preparation course for PMP certification with women instructors.'
    ],
    'organizer': [
        'Women in Tech India', 'DataGirls', 'UX Ladies',
        'ProductWomen', 'CyberHer', 'AI Ethics Alliance',
        'Women in Marketing', 'HR Women Connect', 'FinHer', 'PM Women Circle'
    ],
    'cost': [
        'Paid', 'Free', 'Paid',
        'Paid', 'Free', 'Free',
        'Paid', 'Free', 'Free', 'Paid'
    ],
    'registration_link': [
        'https://example.com/womenintechsummit', 'https://example.com/datascienceforall',
        'https://example.com/uxworkshop', 'https://example.com/productleadership',
        'https://example.com/cybersecurity101', 'https://example.com/aiethics',
        'https://example.com/marketingcareers', 'https://example.com/hrnetworking',
        'https://example.com/financialindependence', 'https://example.com/pmcertification'
    ]
})

# Sample success stories
success_stories = [
    {
        "name": "Priya Sharma",
        "transition": "From developer to CTO",
        "company": "TechSolutions",
        "story": "After 7 years as a developer, I struggled with impostor syndrome when considering leadership roles. Through mentorship and upskilling, I became CTO within 3 years. Now I lead a diverse engineering team of 50+ people.",
        "advice": "Don't be afraid to voice your ambitions. Find mentors who believe in you before you fully believe in yourself."
    },
    {
        "name": "Mira Kapoor",
        "transition": "Returning after a 4-year break",
        "company": "DataMind",
        "story": "After taking time off for family, I was worried my skills were outdated. I joined a returnship program, updated my data science knowledge, and now lead analytics projects that directly impact business decisions.",
        "advice": "Your career break gives you perspective others don't have. Use it as a strength in interviews."
    },
    {
        "name": "Deepa Verma",
        "transition": "Career switcher from finance to UX",
        "company": "DesignFirst",
        "story": "After 10 years in financial analysis, I realized my passion was in design. I took online courses while working, built a portfolio on weekends, and successfully transitioned to UX design where I now create fintech products.",
        "advice": "Your previous career gives you unique insights. In my case, financial knowledge helps me design better fintech experiences."
    },
    {
        "name": "Anjali Mehta",
        "transition": "From individual contributor to leading teams",
        "company": "TechInnovate",
        "story": "I was comfortable coding but terrified of managing people. My mentor helped me see that empathy was my strength. Now I lead with compassion and my team consistently delivers exceptional results.",
        "advice": "Leadership isn't about knowing everything, it's about bringing out the best in others."
    },
    {
        "name": "Lakshmi Iyer",
        "transition": "From traditional IT to AI research",
        "company": "AI Innovations",
        "story": "I spent years maintaining legacy systems but wanted to work on cutting-edge technology. I studied nights and weekends, contributed to open source, and now lead AI initiatives that help detect diseases earlier.",
        "advice": "It's never too late to pivot. The tech industry rewards continuous learners regardless of age."
    }
]

# Sample empowerment statistics
empowerment_stats = {
    "global": {
        "women_in_workforce": 47.7,
        "gender_pay_gap": 20,
        "women_in_tech": 28.8,
        "women_leadership": 29,
        "entrepreneurship": 34.3
    },
    "india": {
        "women_in_workforce": 19.2,
        "gender_pay_gap": 19,
        "women_in_tech": 34,
        "women_leadership": 17.1,
        "entrepreneurship": 13.5
    },
    "live_metrics": {
        "women_upskilled_today": random.randint(10000, 15000),
        "mentorship_sessions_today": random.randint(2000, 5000),
        "jobs_applied_today": random.randint(25000, 40000),
        "success_stories_shared": random.randint(500, 1500)
    }
}

# Sample FAQs for the chatbot
faqs = [
    {
        "question": "How can I find a mentor?",
        "answer": "You can find a mentor by browsing our mentorship directory, filtering by industry and expertise. Once you find someone you connect with, you can request a session through our platform."
    },
    {
        "question": "What career resources do you offer?",
        "answer": "We offer resume reviews, mock interviews, skill assessments, career guidance sessions, job listings, networking events, webinars, and online courses tailored to women's career advancement."
    },
    {
        "question": "How can I attend your events?",
        "answer": "You can browse upcoming events on our Events page, register for those that interest you, and attend either virtually or in-person depending on the event format."
    },
    {
        "question": "I'm returning to work after a break. Where should I start?",
        "answer": "Start with our 'Returnship' resources section, join our returnee community group, explore companies with return-to-work programs, and consider a refresher course in your field."
    },
    {
        "question": "How can I negotiate my salary?",
        "answer": "Research industry standards, document your achievements, practice your pitch, start with a higher figure than your target, and focus on your value to the company. We also offer salary negotiation workshops monthly."
    },
    {
        "question": "What upskilling courses do you recommend?",
        "answer": "We recommend courses based on your career goals. Popular options include data analytics, digital marketing, UX design, coding, project management, and leadership development programs."
    },
    {
        "question": "How can I balance work and family responsibilities?",
        "answer": "Consider flexible work arrangements, build a support system, set boundaries, prioritize self-care, and explore companies with family-friendly policies. Our work-life balance workshops might also help."
    },
    {
        "question": "I face discrimination at work. What should I do?",
        "answer": "Document incidents, know your legal rights, speak with HR, find allies, consider mentorship, and prioritize self-care. Our community also offers support groups and resources for these situations."
    },
    {
        "question": "How do I build confidence for leadership roles?",
        "answer": "Take on stretch assignments, find mentors, seek feedback, develop your unique leadership style, and practice public speaking. Our leadership workshops can also help build these skills."
    },
    {
        "question": "What companies have the best policies for women?",
        "answer": "Companies with strong maternity benefits, flexible work options, pay transparency, mentorship programs, and diverse leadership teams typically rank best. Check our annual 'Best Companies for Women' list for specific recommendations."
    }
]

# Bias detection and reframing database
bias_examples = {
    "women_less_committed": {
        "biased_phrases": [
            "women are less committed to careers",
            "women prioritize family over work",
            "women aren't as dedicated to their jobs",
            "working mothers are distracted",
            "women lack career focus"
        ],
        "reframed_responses": [
            "Research shows women demonstrate high commitment to their careers while often balancing multiple responsibilities. Did you know companies with more women in leadership roles typically outperform their competitors? I can share some inspiring success stories or connect you with resources on building inclusive workplaces.",
            "Many women show tremendous dedication to their careers while navigating societal expectations. Organizations with flexible policies report higher retention and productivity across all employees. Would you like to learn about workplace practices that support all employees?"
        ]
    },
    "women_technical_abilities": {
        "biased_phrases": [
            "women aren't good at technical roles",
            "women struggle with coding",
            "women aren't suited for engineering",
            "women can't code as well",
            "women aren't technical enough"
        ],
        "reframed_responses": [
            "Women are pioneering innovations across all technical fields! Research shows diverse teams produce better solutions to complex problems. I'd be happy to share profiles of technical leaders like Dr. Fei-Fei Li or connect you with female-led tech communities.",
            "Women have been fundamental to technology development from the beginning—from Ada Lovelace to Grace Hopper. Today, women continue to excel in technical roles when given equal opportunities. Would you like to explore resources for building technical skills or promoting inclusive tech teams?"
        ]
    },
    "women_leadership": {
        "biased_phrases": [
            "women are too emotional to lead",
            "women aren't natural leaders",
            "women are too soft for executive roles",
            "women aren't decisive enough",
            "women can't handle tough leadership decisions"
        ],
        "reframed_responses": [
            "Research consistently shows that emotional intelligence—recognizing and managing emotions—is a key leadership strength. Companies with diverse leadership teams outperform those without by 25% on average. Would you like to explore research on effective leadership styles?",
            "Leadership comes in many styles! Research shows that inclusive leadership approaches often associated with women leaders lead to higher team performance and innovation. I can share resources on developing various leadership skills if you're interested."
        ]
    },
    "gender_roles": {
        "biased_phrases": [
            "women should focus on supportive roles",
            "women are better at nurturing positions",
            "women belong in HR or administrative roles",
            "men are better suited for technical leadership",
            "women should handle the soft skills parts"
        ],
        "reframed_responses": [
            "People of all genders excel across the full spectrum of roles when given equal opportunity and support. Diverse teams with members in varied roles consistently outperform homogeneous teams. Would you like to explore how organizations are breaking down traditional role expectations?",
            "Each person brings unique talents regardless of gender! Organizations that enable people to contribute based on their individual strengths rather than gendered expectations report higher innovation and employee satisfaction. I'm happy to share resources on building skills in any area you're interested in."
        ]
    }
}

# Function to detect and reframe biased queries
def detect_and_reframe_bias(query):
    # Convert query to lowercase for matching
    query_lower = query.lower()

    # Check against our bias examples
    for bias_type, content in bias_examples.items():
        for phrase in content["biased_phrases"]:
            if phrase in query_lower:
                # Found a biased phrase, return a reframed response
                return True, random.choice(content["reframed_responses"])

    # No bias detected
    return False, None

# Function to analyze sentiment
def analyze_sentiment(text):
    sentiment_scores = sia.polarity_scores(text)

    if sentiment_scores['compound'] >= 0.05:
        return "positive"
    elif sentiment_scores['compound'] <= -0.05:
        return "negative"
    else:
        return "neutral"

# Function to find similar items using embeddings
def find_similar_items(query, items, text_field, top_n=3):
    # Encode the query
    query_embedding = encoder_model.encode([query])

    # Encode all items
    texts = items[text_field].tolist()
    item_embeddings = encoder_model.encode(texts)

    # Calculate similarities
    similarities = cosine_similarity(query_embedding, item_embeddings)[0]

    # Get top N similar items
    top_indices = similarities.argsort()[-top_n:][::-1]
    return items.iloc[top_indices]

# Function to find relevant jobs
def find_jobs(query):
    return find_similar_items(query, job_data, 'description')

# Function to find relevant mentors
def find_mentors(query):
    return find_similar_items(query, mentors_data, 'expertise')

# Function to find relevant events
def find_events(query):
    return find_similar_items(query, events_data, 'description')

# Function to find relevant FAQs
def find_relevant_faq(query):
    faq_df = pd.DataFrame(faqs)
    results = find_similar_items(query, faq_df, 'question', top_n=1)
    if results.empty:
        return None
    return results.iloc[0]['answer']

# Function to find relevant success story
def find_success_story(query):
    stories_df = pd.DataFrame(success_stories)
    return find_similar_items(query, stories_df, 'story', top_n=1).iloc[0].to_dict()

# Function to create stats visualization
def create_stats_visualization():
    # Create a simple bar chart of global vs India stats
    categories = list(empowerment_stats['global'].keys())
    global_values = list(empowerment_stats['global'].values())
    india_values = list(empowerment_stats['india'].values())

    fig = go.Figure(data=[
        go.Bar(name='Global', x=categories, y=global_values, marker_color='rgb(55, 83, 109)'),
        go.Bar(name='India', x=categories, y=india_values, marker_color='rgb(26, 118, 255)')
    ])

    fig.update_layout(
        title='Women Empowerment Statistics: Global vs India',
        xaxis_title='Category',
        yaxis_title='Percentage (%)',
        barmode='group',
        xaxis={'categoryorder':'total descending'}
    )

    return fig

# Create a live stats visualization
def create_live_stats():
    # Generate some random stats for the demo
    updated_stats = {
        'women_upskilled_today': random.randint(10000, 15000),
        'mentorship_sessions_today': random.randint(2000, 5000),
        'jobs_applied_today': random.randint(25000, 40000),
        'success_stories_shared': random.randint(500, 1500)
    }

    labels = list(updated_stats.keys())
    values = list(updated_stats.values())

    fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])
    fig.update_layout(title_text="Today's Women Empowerment Pulse")

    return fig

# Function to extract user's interests from conversation history
def extract_interests(history):
    interests = []
    if not history:
        return interests

    # Keywords to look for
    keywords = {
        'tech': ['software', 'coding', 'developer', 'engineering', 'tech', 'technology'],
        'data': ['data', 'analytics', 'statistics', 'analysis'],
        'design': ['design', 'ux', 'ui', 'user experience'],
        'management': ['management', 'leadership', 'director', 'executive'],
        'marketing': ['marketing', 'brand', 'communications', 'digital'],
        'finance': ['finance', 'accounting', 'financial', 'banking'],
        'cybersecurity': ['security', 'cyber', 'network', 'protection']
    }

    # Check last 3 user messages
    for i in range(min(3, len(history)//2)):
        idx = len(history) - 2 - (i*2)  # Get user messages
        if idx >= 0:
            user_msg = history[idx].lower()
            for category, terms in keywords.items():
                if any(term in user_msg for term in terms) and category not in interests:
                    interests.append(category)

    return interests

# Function to generate personalized recommendations
def generate_recommendations(interests):
    recommendations = []

    if not interests:
        # Default recommendations if no interests detected
        recommendations.append({
            'type': 'event',
            'title': 'Career Exploration Workshop',
            'description': 'Discover your career interests and strengths.'
        })
        recommendations.append({
            'type': 'article',
            'title': 'Finding Your Professional Path',
            'description': 'Guide to identifying your career interests and goals.'
        })
    else:
        for interest in interests[:2]:  # Limit to top 2 interests
            if interest == 'tech':
                recommendations.append({
                    'type': 'event',
                    'title': 'Women in Tech Summit',
                    'description': 'Connect with leading women in technology.'
                })
            elif interest == 'data':
                recommendations.append({
                    'type': 'course',
                    'title': 'Data Science Fundamentals',
                    'description': 'Learn essential data science skills with Python.'
                })
            elif interest == 'design':
                recommendations.append({
                    'type': 'mentor',
                    'title': 'UX Design Mentorship',
                    'description': 'Get guidance from experienced UX designers.'
                })
            elif interest == 'management':
                recommendations.append({
                    'type': 'article',
                    'title': 'Leadership Skills for Women',
                    'description': 'Develop your leadership style and confidence.'
                })
            elif interest == 'marketing':
                recommendations.append({
                    'type': 'event',
                    'title': 'Digital Marketing Masterclass',
                    'description': 'Learn the latest digital marketing strategies.'
                })
            elif interest == 'finance':
                recommendations.append({
                    'type': 'course',
                    'title': 'Financial Literacy for Career Growth',
                    'description': 'Understand how financial knowledge can accelerate your career.'
                })
            elif interest == 'cybersecurity':
                recommendations.append({
                    'type': 'mentor',
                    'title': 'Cybersecurity Career Path',
                    'description': 'Learn from women leaders in cybersecurity.'
                })

    return recommendations

# Define the bot's responses
def get_asha_response(user_input, history):
    # Check for bias first
    is_biased, reframed_response = detect_and_reframe_bias(user_input)
    if is_biased:
        return reframed_response

    # Extract interests from conversation history
    interests = extract_interests(history)

    # Analyze sentiment
    sentiment = analyze_sentiment(user_input)

    # Convert to lowercase for easier matching
    user_input_lower = user_input.lower()

    # Check for specific queries
    if any(x in user_input_lower for x in ['hello', 'hi', 'hey', 'greetings']):
        return "Hello! 👋 I'm Asha, your career assistant from JobsForHer. I can help you find jobs, mentors, events, or answer questions about your career journey. How can I support you today?"

    elif any(x in user_input_lower for x in ['thank', 'thanks', 'appreciate']):
        return "You're welcome! 😊 I'm here to support your career journey. Is there anything else I can help with?"

    elif any(x in user_input_lower for x in ['job', 'career', 'employment', 'work', 'position']):
        jobs = find_jobs(user_input)
        response = f"I found some job opportunities that might interest you:\n\n"
        for _, job in jobs.iterrows():
            response += f"📋 **{job['title']}** at {job['company']}\n"
            response += f"📍 {job['location']} {'(Remote)' if job['remote'] else ''}\n"
            response += f"✨ {job['description']}\n"
            response += f"👩‍💼 Women-friendly benefits: {job['women_friendly_benefits']}\n\n"

        # Add a success story if sentiment is negative
        if sentiment == "negative":
            story = find_success_story(user_input)
            response += f"\n\n💫 **Success Story**: {story['name']} made a successful {story['transition']} at {story['company']}. \"{story['advice']}\""

        return response

    elif any(x in user_input_lower for x in ['mentor', 'guidance', 'advice', 'coach']):
        mentors = find_mentors(user_input)
        response = f"Here are some mentors who might be able to help you:\n\n"
        for _, mentor in mentors.iterrows():
            response += f"👩‍💼 **{mentor['name']}** - {mentor['position']} at {mentor['company']}\n"
            response += f"💡 Expertise: {mentor['expertise']}\n"
            response += f"📚 Bio: {mentor['bio']}\n"
            response += f"🗓️ Availability: {mentor['availability']}\n\n"

        return response

    elif any(x in user_input_lower for x in ['event', 'workshop', 'conference', 'seminar', 'webinar']):
        events = find_events(user_input)
        response = f"I found these upcoming events you might be interested in:\n\n"
        for _, event in events.iterrows():
            response += f"🎯 **{event['title']}** ({event['type']})\n"
            response += f"📅 Date: {event['date']} | 📍 {event['location']}\n"
            response += f"💬 {event['description']}\n"
            response += f"🏢 Organized by: {event['organizer']} | {'🆓 Free' if event['cost'] == 'Free' else '💰 Paid'}\n\n"

        return response

    elif any(x in user_input_lower for x in ['stats', 'statistics', 'data', 'numbers', 'research']):
        response = "📊 **Women Empowerment Pulse**\n\n"
        response += f"👩‍💻 Women in workforce globally: {empowerment_stats['global']['women_in_workforce']}%\n"
        response += f"👩‍💻 Women in workforce in India: {empowerment_stats['india']['women_in_workforce']}%\n\n"
        response += f"💰 Gender pay gap globally: {empowerment_stats['global']['gender_pay_gap']}%\n"
        response += f"💰 Gender pay gap in India: {empowerment_stats['india']['gender_pay_gap']}%\n\n"
        response += f"👩‍💻 Women in tech globally: {empowerment_stats['global']['women_in_tech']}%\n"
        response += f"👩‍💻 Women in tech in India: {empowerment_stats['india']['women_in_tech']}%\n\n"
        response += f"👑 Women in leadership globally: {empowerment_stats['global']['women_leadership']}%\n"
        response += f"👑 Women in leadership in India: {empowerment_stats['india']['women_leadership']}%\n\n"
        response += f"🚀 Women entrepreneurs globally: {empowerment_stats['global']['entrepreneurship']}%\n"
        response += f"🚀 Women entrepreneurs in India: {empowerment_stats['india']['entrepreneurship']}%\n\n"
        response += "Would you like to see a visualization of these statistics?"

        return response # Fixed indentation here

    elif any(x in user_input_lower for x in ['success', 'story', 'inspire', 'motivation']):
        story = find_success_story(user_input)
        response = f"💫 **Success Story: {story['name']} - {story['transition']}**\n\n"
        response += f"{story['story']}\n\n"
        response += f"**Advice**: \"{story['advice']}\"\n\n"
        response += "Would you like to read another success story or connect with a mentor with a similar background?"

        return response


    elif any(x in user_input_lower for x in ['faq', 'question', 'ask', 'how', 'what', 'why', 'when']):
        faq_answer = find_relevant_faq(user_input)
        if faq_answer:
            return faq_answer

    elif any(x in user_input_lower for x in ['recommend', 'suggestion', 'advice', 'help me']):
        recommendations = generate_recommendations(interests)
        response = "Based on our conversation, you might be interested in:\n\n"
        for rec in recommendations:
            response += f"**{rec['title']}** ({rec['type']})\n"
            response += f"{rec['description']}\n\n"

        return response

    elif any(x in user_input_lower for x in ['salary', 'negotiate', 'pay', 'compensation']):
        response = "💰 **Salary Negotiation Tips**\n\n"
        response += "1. **Research industry standards** for your role, experience level, and location\n"
        response += "2. **Document your achievements** and value to the company\n"
        response += "3. **Practice your negotiation pitch** with a mentor or friend\n"
        response += "4. **Consider the full compensation package**, not just salary\n"
        response += "5. **Be confident and professional** in your approach\n\n"
        response += "We also offer monthly salary negotiation workshops. Would you like me to find the next available session?"

        return response

    elif any(x in user_input_lower for x in ['return', 'break', 'gap', 'sabbatical']):
        response = "🔄 **Returning to Work After a Break**\n\n"
        response += "Many women successfully return to work after career breaks. Here are some tips:\n\n"
        response += "1. **Update your skills** through online courses or workshops\n"
        response += "2. **Refresh your resume** to focus on skills rather than timeline\n"
        response += "3. **Connect with returnship programs** specifically designed for career returners\n"
        response += "4. **Build your confidence** through networking and practice interviews\n"
        response += "5. **Consider flexible work arrangements** if you need work-life balance\n\n"
        response += "Would you like me to connect you with our returnship resources or successful returnees who can share their experiences?"

        return response

    elif any(x in user_input_lower for x in ['balance', 'family', 'children', 'work-life']):
        response = "⚖️ **Work-Life Balance Tips**\n\n"
        response += "1. **Set clear boundaries** between work and personal time\n"
        response += "2. **Prioritize your tasks** and learn to delegate when possible\n"
        response += "3. **Look for flexible work arrangements** like remote work or flexible hours\n"
        response += "4. **Build a support system** at work and home\n"
        response += "5. **Take care of your health** through regular exercise and sufficient rest\n\n"
        response += "Would you like me to share stories from women who have successfully balanced career and family responsibilities?"

        return response

    elif any(x in user_input_lower for x in ['upskill', 'learn', 'course', 'training', 'skill']):
        response = "🎓 **Popular Upskilling Areas for Women in 2025**\n\n"
        response += "1. **Data Analytics** - Learn to analyze data and drive business decisions\n"
        response += "2. **AI and Machine Learning** - Develop skills in this rapidly growing field\n"
        response += "3. **Digital Marketing** - Master the art of online marketing strategies\n"
        response += "4. **UX/UI Design** - Create user-friendly interfaces and experiences\n"
        response += "5. **Leadership & Management** - Prepare for senior roles in your organization\n\n"
        response += "Would you like recommendations for specific courses or programs in any of these areas?"

        return response

    elif any(x in user_input_lower for x in ['discrimination', 'bias', 'unfair', 'harass']):
        response = "⚖️ **Addressing Workplace Discrimination**\n\n"
        response += "I'm sorry to hear you may be experiencing discrimination. Here are some steps you might consider:\n\n"
        response += "1. **Document incidents** with dates, times, and details\n"
        response += "2. **Know your legal rights** in your location\n"
        response += "3. **Speak with HR** or a trusted manager\n"
        response += "4. **Find allies** within your organization\n"
        response += "5. **Consider mentorship** from someone who has navigated similar situations\n"
        response += "6. **Prioritize self-care** during this challenging time\n\n"
        response += "Would you like me to connect you with resources or support groups that might help?"

        return response

    elif any(x in user_input_lower for x in ['confidence', 'imposter', 'doubt']):
        response = "✨ **Building Professional Confidence**\n\n"
        response += "Many successful women have dealt with confidence issues and imposter syndrome. Here are some strategies:\n\n"
        response += "1. **Recognize your achievements** and keep a record of your successes\n"
        response += "2. **Find a mentor** who believes in your capabilities\n"
        response += "3. **Practice positive self-talk** and challenge negative thoughts\n"
        response += "4. **Take on stretch assignments** that grow your skills\n"
        response += "5. **Seek regular feedback** to confirm your progress\n\n"
        response += "Would you like to connect with a confidence coach or join our confidence-building workshop?"

        return response

    else:
        # Generate general response with recommendations based on conversation
        recommendations = generate_recommendations(interests)
        response = "I'm here to support your career journey. Based on our conversation, you might be interested in:\n\n"
        for rec in recommendations:
            response += f"**{rec['title']}** ({rec['type']})\n"
            response += f"{rec['description']}\n\n"

        response += "You can also ask me about jobs, mentors, events, salary negotiation, work-life balance, or any other career-related topics."

        return response

# Create the Gradio interface
with gr.Blocks(theme=gr.themes.Soft(primary_hue="pink")) as demo:
    gr.Markdown(
        """
        # Asha: Your Career Assistant
        *Powered by JobsForHer - Empowering women to achieve their career goals*
        """
    )

    with gr.Row():
        with gr.Column(scale=3):
            chatbot = gr.Chatbot(
                value=[["", "Hello! 👋 I'm Asha, your career assistant from JobsForHer. I can help you find jobs, mentors, events, or answer questions about your career journey. How can I support you today?"]],
                height=400,
                avatar_images=("user.png", "asha.png")
            )
            msg = gr.Textbox(
                placeholder="Ask me about jobs, mentors, events, or career advice...",
                show_label=False
            )
            with gr.Row():
                clear = gr.Button("Clear")
                submit = gr.Button("Submit", variant="primary")

        with gr.Column(scale=2):
            with gr.Tab("Statistics"):
                stats_plot = gr.Plot(create_stats_visualization(), label="Women Empowerment Statistics")
                live_stats = gr.Plot(create_live_stats(), label="Live Empowerment Metrics")
                refresh_btn = gr.Button("Refresh Live Stats")

            with gr.Tab("Quick Links"):
                gr.Markdown(
                    """
                    **Popular Questions**
                    - [Find a job in tech](#jobs)
                    - [Connect with a mentor](#mentors)
                    - [Upcoming events](#events)
                    - [Salary negotiation tips](#salary)
                    - [Work-life balance](#balance)
                    - [Returning after a break](#return)
                    - [Building confidence](#confidence)

                    **Resources**
                    - [Resume Builder](https://example.com)
                    - [Interview Practice](https://example.com)
                    - [Skills Assessment](https://example.com)
                    - [Women's Communities](https://example.com)
                    """
                )

    # Set up event handlers
    def user_input(user_message, history):
        history.append([user_message, None])
        return "", history

    def bot_response(history):
        bot_message = get_asha_response(history[-1][0], history)
        history[-1][1] = bot_message
        return history

    def refresh_live_statistics():
        return create_live_stats()

    msg.submit(user_input, [msg, chatbot], [msg, chatbot], queue=False).then(
        bot_response, [chatbot], [chatbot]
    )

    submit.click(user_input, [msg, chatbot], [msg, chatbot], queue=False).then(
        bot_response, [chatbot], [chatbot]
    )

    clear.click(lambda: None, None, chatbot, queue=False)
    refresh_btn.click(refresh_live_statistics, outputs=[live_stats])

# Launch the demo
demo.launch(share=True)

print("Asha Bot is running! Access the interface through the link above.")